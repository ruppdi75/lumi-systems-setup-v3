name: Daily Update Check

on:
  schedule:
    - cron: '0 6 * * *'  # Run daily at 6 AM UTC
  workflow_dispatch:

jobs:
  check-updates:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check for updates
      run: |
        python -c "
        from pathlib import Path
        from src.updater import SourceChecker, ManifestGenerator, VersionManager
        import json
        
        project_root = Path('.')
        manifest_dir = project_root / 'manifests'
        log_dir = project_root / 'logs' / 'updates'
        
        checker = SourceChecker(manifest_dir)
        manifest_gen = ManifestGenerator(manifest_dir, log_dir)
        version_mgr = VersionManager(project_root)
        
        updates = checker.check_all_sources()
        
        if updates:
            manifest = manifest_gen.generate_manifest(updates, checker.current_sources)
            
            # Save update report
            with open('update_report.json', 'w') as f:
                json.dump(manifest, f, indent=2)
            
            # Generate release notes
            notes = manifest_gen.generate_github_release_notes(manifest)
            with open('release_notes.md', 'w') as f:
                f.write(notes)
            
            print(f'::notice::Found {len(updates)} updates')
            print(checker.get_update_summary(updates))
        else:
            print('::notice::All sources are up to date')
        "
    
    - name: Upload update report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: update-report
        path: |
          update_report.json
          release_notes.md
          manifests/
          logs/updates/
    
    - name: Create issue if updates found
      if: success()
      run: |
        if [ -f "update_report.json" ]; then
          echo "Creating GitHub issue for updates..."
          # This would create an issue using GitHub API
          # gh issue create --title "Software Updates Available" --body-file release_notes.md
        fi
