name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-pyqt6 \
          libgl1 \
          libxcb-xinerama0 \
          libxcb-cursor0 \
          libxkbcommon-x11-0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xfixes0 \
          libxcb-shape0
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install psutil requests packaging distro
    
    - name: Run update check
      continue-on-error: true
      run: |
        python -c "
        import sys
        try:
            from pathlib import Path
            from src.updater import SourceChecker, ManifestGenerator
            
            project_root = Path('.')
            manifest_dir = project_root / 'manifests'
            log_dir = project_root / 'logs' / 'updates'
            
            # Create directories if they don't exist
            manifest_dir.mkdir(exist_ok=True)
            log_dir.mkdir(parents=True, exist_ok=True)
            
            checker = SourceChecker(manifest_dir)
            manifest_gen = ManifestGenerator(manifest_dir, log_dir)
            
            updates = checker.check_all_sources()
            if updates:
                manifest = manifest_gen.generate_manifest(updates, checker.current_sources)
                print(f'Found {len(updates)} updates')
            else:
                print('All sources up to date')
        except Exception as e:
            print(f'Update check failed: {e}')
            sys.exit(0)  # Don't fail the build
        "
    
    - name: Build executable
      run: |
        # Create a simple CLI version without PyQt6 for the release
        cat > lumi_setup_cli.py << 'EOF'
        #!/usr/bin/env python3
        import subprocess
        import sys
        import os
        
        def main():
            print("Lumi Systems Setup v3.0.2")
            print("Starting installation...")
            
            # Make scripts executable
            scripts_dir = os.path.join(os.path.dirname(__file__), 'scripts')
            if os.path.exists(scripts_dir):
                for script in os.listdir(scripts_dir):
                    if script.endswith('.sh'):
                        script_path = os.path.join(scripts_dir, script)
                        os.chmod(script_path, 0o755)
            
            # Run the main setup script
            setup_script = os.path.join(scripts_dir, 'setup.sh')
            if os.path.exists(setup_script):
                subprocess.run(['bash', setup_script])
            else:
                print("Setup script not found. Please run ./install.sh manually")
                sys.exit(1)
        
        if __name__ == "__main__":
            main()
        EOF
        
        pyinstaller --onefile \
          --name lumi-setup \
          --add-data "scripts:scripts" \
          --add-data "manifests:manifests" \
          --add-data "version.json:." \
          lumi_setup_cli.py
    
    - name: Get release info
      id: get_release
      run: |
        echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "RELEASE_NAME=Release ${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Create or Update Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_release.outputs.TAG_NAME }}
        name: ${{ steps.get_release.outputs.RELEASE_NAME }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        files: |
          ./dist/lumi-setup
    
    - name: Upload Manifests
      uses: actions/upload-artifact@v4
      with:
        name: update-manifests
        path: manifests/
